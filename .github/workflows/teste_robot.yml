name: CI integracao-automacao
run-name: Pipeline piloto em Valida√ß√£o

# Controla quando o workflow ser√° executado
on:  
  # Permite executar este workflow manualmente a partir da aba Actions
  workflow_dispatch:
  # schedule:
  #   # Executa todos os dias √† meia-noite UTC
  #   - cron: '30 12 * * 1,2,3,4,5' 

# Uma execu√ß√£o de workflow √© composta por um ou mais jobs que podem executar sequencialmente ou em paralelo
jobs:
  # Este workflow cont√©m um √∫nico job chamado "build"
  build:
    # O tipo de runner no qual o job ser√° executado
    runs-on: [self-hosted, aks]
    permissions: write-all
    container:
      credentials:
        username: ${{ vars.ACR_USERNAME_BACKSTAGE }}
        password: ${{ secrets.ACR_PASSWORD_BACKSTAGE }}
      image: ${{ vars.AZURE_CONTAINER_REGISTRY_BACKSTAGE }}/imagembuildb3/robot-alm-sql:latest
      volumes:
        - /var/run/docker:/var/run/docker
      # Vari√°veis de ambiente que ser√£o usadas em todo o job
    env:
      DNS_SERVER_NAME: ${{vars.DNS_SERVER_NAME}}
      REPOSITORIO_TESTES: ${{ github.repository }}
      BRANCH_TESTES: ${{ github.ref_name }}

      # Variaveis de execu√ß√£o dos testes
      ARQUIVO_TESTE: tests/common/testes_pipeline.robot
      PASTA_LOG: results/common/pipeline
      ARQUIVO_REQUIREMENTS: requirements.txt
      EMAIL_TO: prestador-bruno.rcandido@b3.com.br, prestador-yuri.herdt@b3.com.br
      EMAIL_FROM: prestador-bruno.rcandido@b3.com.br

      # Credenciais Azure Service Principal para conex√£o com banco de dados
      AZR_SDBS_PF_TDNP_T_SP_CLIENT_ID: ${{ vars.AZR_SDBS_PF_TDNP_T_SP_CLIENT_ID }}
      AZR_SDBS_PF_TDNP_T_SP_CLIENT_SECRET: ${{ secrets.AZR_SDBS_PF_TDNP_T_SP_CLIENT_SECRET }}

    # Os steps representam uma sequ√™ncia de tarefas que ser√£o executadas como parte do job
    steps:      
      # Faz checkout do reposit√≥rio no $GITHUB_WORKSPACE para que o job possa acess√°-lo
      - uses: actions/checkout@v4
      
      # Testa conectividade com o ambiente de destino
      - name: Teste de conectividade com ambiente
        run: |
          echo "=== Testando conectividade com ambiente de destino ==="
          echo "URL de teste: https://td-aks-dev.internalenv.corp/internal-api/giftcards/swagger/index.html"
          curl -k -v --connect-timeout 10 --max-time 30 "https://td-aks-dev.internalenv.corp/internal-api/giftcards/swagger/index.html" || echo "Falha na conex√£o"
          echo "=== Teste de conectividade conclu√≠do ==="
      # Instala driver ODBC do Microsoft SQL Server
      #- name: Install Microsoft ODBC Driver for SQL Server
       #env:
         # http_proxy: http://${{ vars.PROXY_HOST }}:${{ vars.PROXY_PORT }}
         # https_proxy: http://${{ vars.PROXY_HOST }}:${{ vars.PROXY_PORT }}
      #  run: |
         
      #   echo "Instalando ODBC Driver para SQL Server..."

      #    sudo -E apt-get update
      #    sudo -E apt-get install -y curl gpg lsb-release unixodbc-dev
      #    sudo -E curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
      #    echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
      #    sudo -E apt-get update
      #    sudo -E ACCEPT_EULA=Y apt-get install -y msodbcsql17
      #    echo "‚úÖ ODBC Driver instalado com sucesso!"
      #    odbcinst -j

      - name: Teste conectividade SQL Server
        run: |
          echo "Testando conectividade com SQL Server..."
          telnet azr-sdbs-pf-td-nova-transacional-dev-n.database.windows.net 1433 && echo  || echo "Telnet falhou"
      
      # Executa os testes automatizados Robot Framework
      - name: Executa Testes Robot Framework
        id: tests
        run: |
          echo "=== DEBUG PROXY E VARI√ÅVEIS ==="
          if [ -n "$AZR_SDBS_PF_TDNP_T_SP_CLIENT_ID" ]; then
            echo "CLIENT_ID presente: ‚úÖ SIM (${#AZR_SDBS_PF_TDNP_T_SP_CLIENT_ID} chars)"
          else
            echo "CLIENT_ID presente: ‚ùå N√ÉO"
          fi
          
          
          echo "=== TESTANDO CONECTIVIDADE AZURE ==="
          curl -v --connect-timeout 10 https://login.microsoftonline.com/ || echo "‚ùå Falha ao conectar Azure AD"
          
          echo "=== INSTALANDO DEPEND√äNCIAS ==="
          python -m pip install --proxy=http://${{ vars.PROXY_HOST }}:${{ vars.PROXY_PORT }} -U pip
          pip install --proxy=http://${{ vars.PROXY_HOST }}:${{ vars.PROXY_PORT }} -U -r $ARQUIVO_REQUIREMENTS
          
          echo "=== TESTANDO CONEX√ÉO SQL ==="
          echo "üìÅ Verificando estrutura de diret√≥rios..."
          ls -la ./libs/data/ || echo "‚ùå Diret√≥rio n√£o encontrado"
          
          echo "üêç Verificando vers√£o do Python..."
          python --version
          
          echo "üì¶ Verificando se pyodbc est√° instalado..."
          python -c "import pyodbc; print('‚úÖ pyodbc importado com sucesso')" || echo "‚ùå Erro ao importar pyodbc"
          
          echo "üîÑ Executando dbConnection.py..."
          cd ./libs/data
          python dbConnection.py || echo "‚ùå Erro na execu√ß√£o do dbConnection.py"
          echo "‚úÖ Retornando ao diret√≥rio raiz..."
          cd .. ; cd ..
          
          
          echo "=== EXECUTANDO TESTES ROBOT (ENV=dev) ==="
          python -m robot -v ENV:dev -d $PASTA_LOG $ARQUIVO_TESTE
      
      # Cria um arquivo ZIP dos logs com um nome din√¢mico baseado no repositorio
      - name: Gera report zip com nomenclatura din√¢mica
        id: report_zip
        run: |
          # Cria timestamp leg√≠vel (YYYY-MM-DD_HH-MM-SS)
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          
          # Extrai apenas o nome do reposit√≥rio (sem o owner)
          REPO_NAME=$(echo "$REPOSITORIO_TESTES" | cut -d'/' -f2)
          
          # Cria nome do arquivo zip
          ZIP_NAME="${REPO_NAME}_${BRANCH_TESTES}_${TIMESTAMP}.zip"
          
          # Cria arquivo zip dos logs
          cd $PASTA_LOG && zip -r "../$ZIP_NAME" . && cd ..
          
          # Verifica se o arquivo ZIP foi criado com sucesso
          if [ -f "$ZIP_NAME" ]; then
            echo "‚úÖ Arquivo ZIP criado com sucesso: $ZIP_NAME"
            echo "üìÅ Tamanho do arquivo: $(du -h "$ZIP_NAME" | cut -f1)"
          else            echo "‚ùå Erro ao criar arquivo ZIP"
            exit 1
          fi
          
          # Define outputs para uso em steps seguintes
          echo "report_path=$PASTA_LOG/log.html" >> $GITHUB_OUTPUT
          echo "zip_path=$PWD/$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
      
      # Upload dos resultados de teste para o GitHub actions
      - name: Upload dos resultados
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-results
          path: ${{ env.PASTA_LOG }}
          if-no-files-found: ignore
          retention-days: 5      # Envia email em caso de sucesso dos testes
      - name: Envia Email - Sucesso
        if: success()
        uses: dawidd6/action-send-mail@2cea9617b09d79a095af21254fbcb7ae95903dde
        with:
          # Configura√ß√µes do servidor SMTP
          server_address: smtprelay.intraservice.corp
          # Configura√ß√µes da mensagem
          subject: "‚úÖ [QA Pipeline] Testes Executados com Sucesso - ${{ env.REPOSITORIO_TESTES }}/${{ env.BRANCH_TESTES }}"
          to: ${{ env.EMAIL_TO }}
          from: ${{ env.EMAIL_FROM }}
          # Anexa arquivo zip dos logs
          attachments: ${{ steps.report_zip.outputs.zip_path }}
          # Corpo do email
          body: |
            üéâ **SUCESSO** - Pipeline executado via GitHub Actions
            
            ‚úÖ Todos os testes foram executados com sucesso!
            
            üìã **Detalhes da Execu√ß√£o:**
            ‚Ä¢ Reposit√≥rio: ${{ env.REPOSITORIO_TESTES }}
            ‚Ä¢ Branch: ${{ env.BRANCH_TESTES }}
            ‚Ä¢ Arquivo de Teste: ${{ env.ARQUIVO_TESTE }}
            ‚Ä¢ Status: ${{ job.status }}
            ‚Ä¢ Arquivo ZIP: ${{ steps.report_zip.outputs.zip_name }}
            
            üîó **Link da Execu√ß√£o:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            üìé **Anexos:** Logs completos est√£o anexados em formato ZIP.
            
            ---
            ü§ñ Mensagem autom√°tica do sistema de CI/CD
        # Envia email em caso de falha dos testes
      - name: Envia Email - Falha
        if: failure()
        uses: dawidd6/action-send-mail@2cea9617b09d79a095af21254fbcb7ae95903dde
        with:
          # Configura√ß√µes do servidor SMTP
          server_address: smtprelay.intraservice.corp
          # Configura√ß√µes da mensagem
          subject: "‚ùå [QA Pipeline] FALHA na Execu√ß√£o dos Testes - ${{ env.REPOSITORIO_TESTES }}/${{ env.BRANCH_TESTES }}"
          to: ${{ env.EMAIL_TO }}
          from: ${{ env.EMAIL_FROM }}
          # Anexa arquivo zip dos logs
          attachments: ${{ steps.report_zip.outputs.zip_path }}
          # Corpo do email
          body: |
            üö® **FALHA** - Pipeline executado via GitHub Actions
            
            ‚ùå Ocorreu uma falha durante a execu√ß√£o dos testes!
            
            üìã **Detalhes da Execu√ß√£o:**
            ‚Ä¢ Reposit√≥rio: ${{ env.REPOSITORIO_TESTES }}
            ‚Ä¢ Branch: ${{ env.BRANCH_TESTES }}
            ‚Ä¢ Arquivo de Teste: ${{ env.ARQUIVO_TESTE }}
            ‚Ä¢ Status: ${{ job.status }}
            ‚Ä¢ Arquivo ZIP: ${{ steps.report_zip.outputs.zip_name }}
            
            üîó **Link da Execu√ß√£o:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            üìé **Anexos:** Logs completos para an√°lise est√£o anexados em formato ZIP.
            
            üîç **Pr√≥ximos Passos:**
            1. Verifique os logs anexados para identificar a causa da falha
            2. Acesse o link da execu√ß√£o para mais detalhes
            3. Corrija os problemas identificados
            
            ---
            ü§ñ Mensagem autom√°tica do sistema de CI/CD
